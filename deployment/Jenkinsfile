pipeline {
    agent
    {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-agent
spec:
  containers:
    - name: builder
      image: gradle:7.6.2-jdk17
      command: ["cat"]
      tty: true
    - name: docker
      image: docker:20.10
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
    - name: kubectl
      image: bitnami/kubectl:latest
      command: ["/bin/bash", "-c", "sleep 3600"]
      tty: true
      volumeMounts:
        - name: kubectl-bin
          mountPath: /usr/local/bin/kubectl
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: Socket
    - name: kubectl-bin
      hostPath:
        path: /usr/local/bin/kubectl
        type: File

'''
        }
    }

    environment {
        PROJECT_NAME = "TodoListCarlos"
        DOCKER_REGISTRY = "192.168.0.14:32500"
        IMAGE_NAME = "todolistcarlos"
        IMAGE_TAG = "latest"
        KUBE_NAMESPACE = "default"
        KUBERNETES_SERVER = "https://192.168.0.14:6443"
        KUBECONFIG_CREDENTIALS_ID = 'kubernetes-credentials'
        DOCKER_CREDENTIALS_ID = 'secret-private-registry'
        PATH = '/opt/bitnami/kubectl/bin:/usr/local/bin:/usr/bin:$PATH'
    }

    stages {
        stage("Checkout Source Code") {
            steps {
                script {
                    echo "Checking out source code..."
                    checkout scm
                }
            }
        }
        stage('Setup') {
            steps {
                sh 'chmod +x gradlew'
            }
        }
        stage("Compile") {
            steps {
                container('builder') {
                    script {
                        echo "Compiling the Java code..."
                        sh "./gradlew compileJava"
                    }
                }
            }
        }
//         stage('Install kubectl') {
//             steps {
//                 container('kubectl') {
//                     script {
//                         sh '''
//                         set -e
//                         ARCH=amd64
//                         KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
//                         curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/${ARCH}/kubectl"
//                         chmod +x kubectl
//                         mv kubectl /usr/local/bin/
//                         kubectl version --client
//                         '''
//                     }
//                 }
//             }
//         }
        stage('Verify kubectl') {
            steps {
                container('kubectl') {
                    script {
                        sh "kubectl version --client"
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        echo "Building Docker Image..."
                        sh """
                        docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -f deployment/Dockerfile .
                        """
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                container('docker') {
                    script {
                        withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh """
                            echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }
        stage('Deploy billing App') {
            steps {
                container('kubectl') {
                    withCredentials([string(credentialsId: KUBECONFIG_CREDENTIALS_ID, variable: 'KUBE_TOKEN')]) {
                        sh "kubectl --token $KUBE_TOKEN --server ${KUBERNETES_SERVER} --insecure-skip-tls-verify=true get ns"
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    withCredentials([string(credentialsId: KUBECONFIG_CREDENTIALS_ID, variable: 'KUBE_TOKEN')]) {
                        sh "kubectl --token $KUBE_TOKEN --server ${KUBERNETES_SERVER} --insecure-skip-tls-verify=true apply -f deployment/deployment.yaml"
                    }
                }
            }
        }
    }
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
