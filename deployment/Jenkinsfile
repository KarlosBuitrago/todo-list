pipeline {
    agent {
        kubernetes {
            inheritFrom 'kubectl'
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: kubectl-agent
spec:
  securityContext:
    runAsUser: 1001
    runAsGroup: 1002
    fsGroup: 1002
    fsGroupChangePolicy: "Always"
  containers:
    - name: builder
      image: gradle:7.6.2-jdk17
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: docker-home
          mountPath: /home/jenkins
    - name: docker
      image: docker:20.10
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
        - name: docker-home
          mountPath: /home/jenkins
    - name: kubectl
      image: docker.io/bitnami/kubectl:1.27
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: kubectl-bin
          mountPath: /usr/local/bin/kubectl
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: Socket
    - name: kubectl-bin
      hostPath:
        path: /usr/local/bin/kubectl
        type: File
    - name: docker-home
      hostPath:
        path: /var/lib/jenkins
        type: DirectoryOrCreate

'''
        }
    }

    environment {
        PROJECT_NAME = "TodoListCarlos"
        DOCKER_REGISTRY = "192.168.0.110:32500"
        IMAGE_NAME = "todolistcarlos"
        IMAGE_TAG = "latest"
        KUBE_NAMESPACE = "default"
        KUBERNETES_SERVER = "https://192.168.0.110:16443"
        KUBECONFIG_CREDENTIALS_ID = credentials('kubernetes-credentials')
        DOCKER_CREDENTIALS_ID = 'secret-private-registry'
        DOCKER_CONFIG = "/home/jenkins/.docker"
    }

    stages {
        stage("Checkout Source Code") {
            steps {
                script {
                    echo "Checking out source code..."
                    checkout scm
                }
            }
        }
        stage('Setup') {
            steps {
                sh 'chmod +x gradlew'
            }
        }
        stage("Compile") {
            steps {
                container('builder') {
                    script {
                        echo "Compiling the Java code..."
                        sh 'chmod +x gradlew'
                        sh "./gradlew compileJava"
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        echo "Building Docker Image..."
                        sh """
                        mkdir -p $DOCKER_CONFIG
                        docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -f deployment/Dockerfile .
                        """
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                container('docker') {
                    script {
                        withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh """
                            echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        writeFile file: '/tmp/kubeconfig.yaml', text: KUBECONFIG_CREDENTIALS_ID
                        sh "KUBECONFIG=/tmp/kubeconfig.yaml kubectl apply -f deployment/deployment.yaml"
                    }
                }
            }
        }
    }
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
