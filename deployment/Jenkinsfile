pipeline {
    agent
    {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-agent
spec:
  containers:
  - name: builder
    image: gradle:jdk17
    command: ["/bin/sh", "-c", "apt-get update && apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && echo 'deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable' | tee /etc/apt/sources.list.d/docker.list > /dev/null && apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io && /bin/bash"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    workingDir: /workspace
  volumes:
  - name: workspace
    emptyDir: {}
'''
        }
    }

    environment {
        PROJECT_NAME = "TodoListCarlos"
        DOCKER_REGISTRY = "192.168.0.100:32500"
        DOCKER_PASSWORD = "Buitra90"
        DOCKER_USERNAME = "cjbuitrago"
        IMAGE_NAME = "todolistcarlos"
        IMAGE_TAG = "latest"
        KUBERNETES_SERVER = "https://192.168.0.100:6443" // Asegurando que sea el mismo en todas partes
        KUBECONFIG_CREDENTIALS_ID = 'kubernetes-credentials'
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
    }

    stages {
        stage("Checkout Source Code") {
            steps {
                script {
                    echo "Checking out source code..."
                    checkout scm
                }
            }
        }

        stage("Compile") {
            steps {
                container('builder') {
                    echo "Compiling the Java code..."
                    sh "./gradlew compileJava"
                }
            }
        }

//         stage('Build Application with Gradle') {
//             steps {
//                 container('builder') {
//                     script {
//                         echo "Building application..."
//                         sh './gradlew build -x test'
//                     }
//                 }
//             }
//         }

        stage('Build Docker Image') {
            steps {
                container('builder') {
                    script {
                        echo "Building Docker Image..."
                        sh """
                        docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -f deployment/Dockerfile .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                container('builder') {
                    script {
                        withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh """
                            echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([string(credentialsId: KUBECONFIG_CREDENTIALS_ID, variable: 'KUBE_TOKEN')]) {
                    script {
                        echo "Deploying to Kubernetes..."
                        sh """
                        kubectl --token=$KUBE_TOKEN --server=$KUBERNETES_SERVER --insecure-skip-tls-verify=true apply -f deployment/deployment.yaml
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
