pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:20.10.7
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-socket
      mountPath: /var/run/docker.sock
  volumes:
  - name: docker-socket
    hostPath:
      path: /var/run/docker.sock
"""
        }
    }

    environment {
        PROJECT_NAME = "TodoListCarlos"
        DOCKER_REGISTRY = "192.168.0.100:32500"
        IMAGE_NAME = "todolistcarlos"
        IMAGE_TAG = "latest"
        KUBECONFIG_CREDENTIALS_ID = '5c901259-27f9-49c5-abcf-6351cfe129c1'
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id' // Cambia por el ID de credenciales en Jenkins
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Build Application with Gradle') {
            steps {
                container('docker') {
                    script {
                        // Construir el proyecto con Gradle y generar el .jar
                        sh './gradlew build -x test'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        // Construir la imagen Docker usando el archivo .jar generado
                        sh """
                        docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                container('docker') {
                    script {
                        // Subir la imagen al registry
                        sh "docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy billing App') {
                 steps {
                    withCredentials(bindings: [
                              string(credentialsId: 'KUBECONFIG_CREDENTIALS_ID', variable: 'api_token')
                              ]) {
                    sh 'kubectl --token $api_token --server https://192.168.0.100:31919 --insecure-skip-tls-verify=true get ns '
                  }

                }
              }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([string(credentialsId: KUBECONFIG_CREDENTIALS_ID, variable: 'api-token')]) {
                    script {
                        // Desplegar la imagen en Kubernetes
                        sh """
                        kubectl --token=$api-token --server=https://192.168.0.100:31919 --insecure-skip-tls-verify=true apply -f deployment/deployment.yaml
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
