pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-agent
spec:
  containers:
  - name: builder
    image: gradle:7.6.2-jdk17
    command: ["sleep", "99d"]
    tty: true
  - name: docker
    image: docker:20.10
    command: ["sleep", "99d"]
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
      type: Socket
'''
        }
    }

    environment {
        PROJECT_NAME = "TodoListCarlos"
        DOCKER_REGISTRY = "192.168.0.100:32500"
        IMAGE_NAME = "todolistcarlos"
        IMAGE_TAG = "latest"
        KUBERNETES_SERVER = "https://192.168.0.100:6443"
        KUBECONFIG_CREDENTIALS_ID = 'kubernetes-credentials'
        DOCKER_CREDENTIALS_ID = 'secret-private-registry'
    }

    stages {
        stage("Checkout Source Code") {
            steps {
                script {
                    echo "Checking out source code..."
                    checkout scm
                }
            }
        }

        stage('Setup') {
            steps {
                sh 'chmod +x gradlew'
            }
        }

        stage("Compile") {
            steps {
                container('builder') {
                    script {
                        echo "Compiling the Java code..."
                        sh 'chmod +x gradlew'
                        sh "./gradlew compileJava"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        echo "Building Docker Image..."
                        sh """
                        docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -f deployment/Dockerfile .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                container('docker') {
                    script {
                        withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh """
                            echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    withCredentials([string(credentialsId: KUBECONFIG_CREDENTIALS_ID, variable: 'KUBE_TOKEN')]) {
                        script {
                            echo "Deploying to Kubernetes..."
                            withEnv(["TOKEN=$KUBE_TOKEN"]) {
                                sh """
                                kubectl --token=$TOKEN --server=$KUBERNETES_SERVER --insecure-skip-tls-verify=true apply -f deployment/deployment.yaml
                                """
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
