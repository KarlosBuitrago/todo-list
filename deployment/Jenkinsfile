pipeline {
    agent {
        kubernetes {
            inheritFrom 'kubectl'
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: kubectl-agent
spec:
  containers:
    - name: builder
      image: gradle:7.6.2-jdk17
      command: ["cat"]
      tty: true
    - name: docker
      image: docker:20.10
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock
    - name: kubectl
      image: bitnami/kubectl:1.32
      command: ["cat"]
      tty: true
      volumeMounts:
        - name: kubectl-bin
          mountPath: /usr/local/bin/kubectl
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: Socket
    - name: kubectl-bin
      hostPath:
        path: /usr/local/bin/kubectl
        type: File
'''
        }
    }

    environment {
        PROJECT_NAME = "TodoListCarlos"
        DOCKER_REGISTRY = "192.168.0.110:32500"
        IMAGE_NAME = "todolistcarlos"
        IMAGE_TAG = "latest"
        KUBE_NAMESPACE = "default"
        KUBERNETES_SERVER = "https://192.168.0.110:6443"
        KUBECONFIG_CREDENTIALS_ID = credentials('kubernetes-credentials')
        DOCKER_CREDENTIALS_ID = 'secret-private-registry'
    }

    stages {
        stage("Checkout Source Code") {
            steps {
                script {
                    echo "Checking out source code..."
                    checkout scm
                }
            }
        }
        stage('Setup') {
            steps {
                sh 'chmod +x gradlew'
            }
        }
        stage("Compile") {
            steps {
                container('builder') {
                    script {
                        echo "Compiling the Java code..."
                        sh 'chmod +x gradlew'
                        sh "./gradlew compileJava"
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        echo "Building Docker Image..."
                        sh """
                        docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -f deployment/Dockerfile .
                        """
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                container('docker') {
                    script {
                        withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh """
                            echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin
                            docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Guardar el kubeconfig en un archivo temporal
                    def kubeconfigFile = "/tmp/kubeconfig.yaml"
                    writeFile file: kubeconfigFile, text: KUBECONFIG_CREDENTIALS_ID

                    // Usar kubectl con el archivo
                    sh "KUBECONFIG=${kubeconfigFile} microk8 kubectl get nodes"

                    // Desplegar la aplicaciÃ³n
                    kubernetesDeploy(
                        configs: 'deployment/deployment.yaml',
                        kubeconfigId: kubeconfigFile
                    )
                }
            }
        }        
        // stage('Install kubectl') {
        //     steps {
        //         container('kubectl') {
        //             sh '''
        //             curl -LO "https://dl.k8s.io/release/v1.32.0/bin/linux/amd64/kubectl"
        //             chmod +x kubectl
        //             mv kubectl /usr/local/bin/
        //             '''
        //         }
        //     }
        // }
        // stage('Deploy billing App') {
        //     steps {
        //         container('kubectl') {
        //             withCredentials([string(credentialsId: 'kubernetes-credentials', variable: 'KUBE_TOKEN')]) {
        //                 script {
        //                     echo "Checking Kubernetes token..."                            
        //                     // Guarda el kubeconfig en un archivo temporal
        //                     sh '''
        //                     echo "$KUBECONFIG_CONTENT" > /tmp/kubeconfig
        //                     export KUBECONFIG=/tmp/kubeconfig
        
        //                     # Extraer el token desde el kubeconfig
        //                     KUBE_TOKEN=$(kubectl config view --raw -o jsonpath='{.users[0].user.token}')
        //                     echo "KUBE_TOKEN length: $(echo -n $KUBE_TOKEN | wc -c)"
        //                     '''
        //                     sh '''
        //                     echo "Verificando PATH dentro del contenedor..."
        //                     echo $PATH
        //                     which kubectl
        //                     '''
        //                     echo "Checking workspace directories..."
        //                     sh '''
        //                     ls -la /home/jenkins/agent/
        //                     ls -la /home/jenkins/agent/workspace/
        //                     '''

        //                     echo "Deploying to Kubernetes..."
        //                     sh '''
        //                     kubectl --token $KUBE_TOKEN --server ${KUBERNETES_SERVER} --insecure-skip-tls-verify=true get ns
        //                     '''
        //                 }
        //             }
        //         }
        //     }
        // }
        // stage('Deploy to Kubernetes') {
        //     steps {
        //         container('kubectl') {
        //             withCredentials([string(credentialsId: 'kubernetes-credentials', variable: 'KUBE_TOKEN')]) {
        //                 script {
        //                     sh '''
        //                     kubectl --token $KUBE_TOKEN --server ${KUBERNETES_SERVER} --insecure-skip-tls-verify=true apply -f deployment/deployment.yaml
        //                     '''
        //                 }
        //             }
        //         }
        //     }
        // }
    }
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
